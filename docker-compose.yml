
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: autodeploy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-autodeploy}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-autodeploy_password}
      POSTGRES_DB: ${POSTGRES_DB:-autodeploy}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U autodeploy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: autodeploy-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-5000}:5000"
      - "8000-10000:8000-10000"  # Port range for deployed containers
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 5000
      DATABASE_URL: postgresql://${POSTGRES_USER:-autodeploy}:${POSTGRES_PASSWORD:-autodeploy_password}@postgres:5432/${POSTGRES_DB:-autodeploy}
      AI_API_KEY: ${AI_API_KEY}
      AI_BASE_URL: ${AI_BASE_URL}
      AI_MODEL: ${AI_MODEL}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173}
      DOCKER_HOST: tcp://host.docker.internal:2375
      GIT_TERMINAL_PROMPT: "0"
      GIT_ASKPASS: "echo"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./repos:/app/repos  # Share repos folder with Docker for build context
    command: sh -c "npx prisma migrate deploy && node app.js"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: autodeploy-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-5173}:80"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5000}
    depends_on:
      - backend

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: autodeploy-network


